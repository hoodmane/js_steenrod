(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
!function(e){"use strict";var r=function(e,r){var t=new Error(e+" at character "+r);throw t.index=r,t.description=e,t},t={"-":!0,"!":!0,"~":!0,"+":!0},n={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},o=function(e){var r,t=0;for(var n in e)(r=n.length)>t&&e.hasOwnProperty(n)&&(t=r);return t},i=o(t),a=o(n),u={true:!0,false:!1,null:null},s=function(e){return n[e]||0},p=function(e,r,t){return{type:"||"===e||"&&"===e?"LogicalExpression":"BinaryExpression",operator:e,left:r,right:t}},f=function(e){return e>=48&&e<=57},c=function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=128&&!n[String.fromCharCode(e)]},l=function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||e>=128&&!n[String.fromCharCode(e)]},h=function(e){for(var o,h,d=0,v=e.charAt,x=e.charCodeAt,y=function(r){return v.call(e,r)},m=function(r){return x.call(e,r)},g=e.length,b=function(){for(var e=m(d);32===e||9===e||10===e||13===e;)e=m(++d)},E=function(){var e,t,n=w();return b(),63!==m(d)?n:(d++,(e=E())||r("Expected expression",d),b(),58===m(d)?(d++,(t=E())||r("Expected expression",d),{type:"ConditionalExpression",test:n,consequent:e,alternate:t}):void r("Expected :",d))},C=function(){b();for(var r=e.substr(d,a),t=r.length;t>0;){if(n.hasOwnProperty(r)&&(!c(m(d))||d+r.length<e.length&&!l(m(d+r.length))))return d+=t,r;r=r.substr(0,--t)}return!1},w=function(){var e,t,n,o,i,a,u,f;if(a=O(),!(t=C()))return a;for(i={value:t,prec:s(t)},(u=O())||r("Expected expression after "+t,d),o=[a,i,u];(t=C())&&0!==(n=s(t));){for(i={value:t,prec:n};o.length>2&&n<=o[o.length-2].prec;)u=o.pop(),t=o.pop().value,a=o.pop(),e=p(t,a,u),o.push(e);(e=O())||r("Expected expression after "+t,d),o.push(i,e)}for(e=o[f=o.length-1];f>1;)e=p(o[f-1].value,o[f-2],e),f-=2;return e},O=function(){var r,n,o;if(b(),r=m(d),f(r)||46===r)return U();if(39===r||34===r)return k();if(91===r)return S();for(o=(n=e.substr(d,i)).length;o>0;){if(t.hasOwnProperty(n)&&(!c(m(d))||d+n.length<e.length&&!l(m(d+n.length))))return d+=o,{type:"UnaryExpression",operator:n,argument:O(),prefix:!0};n=n.substr(0,--o)}return!(!c(r)&&40!==r)&&A()},U=function(){for(var e,t,n="";f(m(d));)n+=y(d++);if(46===m(d))for(n+=y(d++);f(m(d));)n+=y(d++);if("e"===(e=y(d))||"E"===e){for(n+=y(d++),"+"!==(e=y(d))&&"-"!==e||(n+=y(d++));f(m(d));)n+=y(d++);f(m(d-1))||r("Expected exponent ("+n+y(d)+")",d)}return t=m(d),c(t)?r("Variable names cannot start with a number ("+n+y(d)+")",d):46===t&&r("Unexpected period",d),{type:"Literal",value:parseFloat(n),raw:n}},k=function(){for(var e,t="",n=y(d++),o=!1;d<g;){if((e=y(d++))===n){o=!0;break}if("\\"===e)switch(e=y(d++)){case"n":t+="\n";break;case"r":t+="\r";break;case"t":t+="\t";break;case"b":t+="\b";break;case"f":t+="\f";break;case"v":t+="\v";break;default:t+=e}else t+=e}return o||r('Unclosed quote after "'+t+'"',d),{type:"Literal",value:t,raw:n+t+n}},L=function(){var t,n=m(d),o=d;for(c(n)?d++:r("Unexpected "+y(d),d);d<g&&(n=m(d),l(n));)d++;return t=e.slice(o,d),u.hasOwnProperty(t)?{type:"Literal",value:u[t],raw:t}:"this"===t?{type:"ThisExpression"}:{type:"Identifier",name:t}},j=function(e){for(var t,n,o=[],i=!1;d<g;){if(b(),(t=m(d))===e){i=!0,d++;break}44===t?d++:((n=E())&&"Compound"!==n.type||r("Expected comma",d),o.push(n))}return i||r("Expected "+String.fromCharCode(e),d),o},A=function(){var e,t;for(t=40===(e=m(d))?P():L(),b(),e=m(d);46===e||91===e||40===e;)d++,46===e?(b(),t={type:"MemberExpression",computed:!1,object:t,property:L()}):91===e?(t={type:"MemberExpression",computed:!0,object:t,property:E()},b(),93!==(e=m(d))&&r("Unclosed [",d),d++):40===e&&(t={type:"CallExpression",arguments:j(41),callee:t}),b(),e=m(d);return t},P=function(){d++;var e=E();if(b(),41===m(d))return d++,e;r("Unclosed (",d)},S=function(){return d++,{type:"ArrayExpression",elements:j(93)}},B=[];d<g;)59===(o=m(d))||44===o?d++:(h=E())?B.push(h):d<g&&r('Unexpected "'+y(d)+'"',d);return 1===B.length?B[0]:{type:"Compound",body:B}};if(h.version="0.3.4",h.toString=function(){return"JavaScript Expression Parser (JSEP) v"+h.version},h.addUnaryOp=function(e){return i=Math.max(e.length,i),t[e]=!0,this},h.addBinaryOp=function(e,r){return a=Math.max(e.length,a),n[e]=r,this},h.addLiteral=function(e,r){return u[e]=r,this},h.removeUnaryOp=function(e){return delete t[e],e.length===i&&(i=o(t)),this},h.removeAllUnaryOps=function(){return t={},i=0,this},h.removeBinaryOp=function(e){return delete n[e],e.length===a&&(a=o(n)),this},h.removeAllBinaryOps=function(){return n={},a=0,this},h.removeLiteral=function(e){return delete u[e],this},h.removeAllLiterals=function(){return u={},this},"undefined"==typeof exports){var d=e.jsep;e.jsep=h,h.noConflict=function(){return e.jsep===h&&(e.jsep=d),h}}else"undefined"!=typeof module&&module.exports?exports=module.exports=h:exports.parse=h}(this);

},{}],3:[function(require,module,exports){
let Vector=require("./vector.js"),multinomial=require("./combinatorics.js").multinomial;function find_next_milnor_matrix(t,e,l,i){let r,n=t.length+1,o=e.length+1;for(let e=1;!r&&e<n;e++){let n=l[e][0];for(let s=1;!r&&s<o;s++){let a=Math.pow(i,s);if(n>=a){let i=0;for(let t=0;t<e;t++)i+=l[t][s];if(0!=i){r=!0;for(let i=1;i<e;i++){l[i][0]=t[i-1];for(let t=1;t<o;t++)l[0][t]=l[0][t]+l[i][t],l[i][t]=0}for(let t=1;t<s;t++)l[0][t]=l[0][t]+l[e][t],l[e][t]=0;l[0][s]=l[0][s]-1,l[e][s]=l[e][s]+1,l[e][0]=n-a}else n+=l[e][s]*a}else n+=l[e][s]*a}}return r}function milnor_multiplication_even(t,e,l){let i=new MilnorBasis(l),r=t.length+1,n=e.length+1,o=t.length+e.length,s=Array(r).fill().map(()=>Array(n).fill(0));for(let t=1;t<n;t++)s[0][t]=e[t-1];for(let e=1;e<r;e++)s[e][0]=t[e-1];do{let t=1,e=Array(o).fill(0);for(let i=1;i<=o;i++){let o=[];for(let t=Math.max(0,i-n+1);t<Math.min(1+i,r);t++)o.push(s[t][i-t]);if(0===(t*=multinomial(o,l)))break;e[i-1]=o.reduce((t,e)=>t+e)}if(0!==t){let l=o-1;for(;l>=0&&0==e[l];)l--;let r=e.slice(0,l+1);i.addTerm(r,t)}}while(find_next_milnor_matrix(t,e,s,l));return i}function milnor_multiplication_full(t,e,l){let i,r=e[0],n=e[1],o=new MilnorBasis(l);o.set(t,1);for(let t of r){let e=o;o=new MilnorBasis(l);for(let i of e.keys())for(let r=0;r<1+i[1].length;r++)if(!i[0].includes(t+r)&&(0===r||Math.pow(l,t)<=i[1][r-1])){let n,s=new Set(i[0]),a=-((n=(s=[...s]).length>0?s.filter(e=>t+r<=e&&e<=Math.max(...s)).length:0)%2*2-1)*e.get(i),f=i[0].slice();0===n?f.push(t+r):f.splice(f.length-n,0,t+r),s=f;let u=i[1].slice();for(r>0&&(u[r-1]=u[r-1]-Math.pow(l,t));u.length>0&&0===u[u.length-1];)u.pop();o.set([s,u],(a%l+l)%l)}}if(0===n.length)i=o;else{i=new MilnorBasis(l);for(const[t,e]of o.keys()){let r=o.get([t,e]),s=milnor_multiplication_even(e,n,l);for(let e of s.keys())i.addTerm([t,e],r*s.get(e))}}return i}function milnor_multiplication(t,e,l){return 2===l?milnor_multiplication_even(t,e,l):milnor_multiplication_full(t,e,l)}class MilnorBasis extends Vector{constructor(t){super(t)}static unit(t){let e=new MilnorBasis(t);return 2===t?e.set([],1):e.set([[],[]],1),e}static Q(t,e){let l=new MilnorBasis(e);if(Array.isArray(t)||(t=[t]),2===e){let e=Array(Math.max(...t)).fill().map((e,l)=>+t.includes(l));l.set(e,1)}else{if(t.length>1)return t.map(t=>MilnorBasis.Q(t,e)).reduce((t,e)=>t.mult(e));l.set([t,[]],1)}return l}static Sq(t,e){let l=new MilnorBasis(e);if(Array.isArray(t)||(t=[t]),2!==e)throw"Error";return l.set(t,1),l}static P(t,e){let l=new MilnorBasis(e);if(Array.isArray(t)||(t=[t]),2===e)throw"Error";return l.set([[],t],1),l}static bP(t,e){let l=new MilnorBasis(e);return 2===e?l.set([2*t+1],1):l.set([[1],[t]],1),l}static b(t){let e=new MilnorBasis(t);return 2===t?e.set([1]):e.set([[0],[]],1),e}mult(t){return t.constructor===Number?this.scale(t):super.mult((t,e)=>milnor_multiplication(t,e,this.p),t)}toLatex(){let t=[];if(2===this.p)for(let[e,l]of this){let l=e.map(t=>`Sq^{${t}}`).join("");t.push(l)}else for(let[e,l]of this){let i=e.map((t,e)=>e%2==0?1===t?"b":"":`P^{${t}}`).join("");1!==l&&(i=l+i),t.push(i)}return t.join(" + ")}toString(){let t=[];if(2===this.p)for(let[e,l]of this){let l=`Sq(${e.join(", ")})`;t.push(l)}else for(let[e,l]of this){let i=[e[0].map(t=>`Q${t}`).join("*"),e[1].length>0?`P(${e[1].join(", ")})`:""].filter(t=>""!==t).join("*");1!==l&&(i=l+"*"+i),t.push(i)}return""===(t=t.join(" + "))&&(t=0),t}inspect(t,e){return this.toString()}}module.exports=MilnorBasis;

},{"./combinatorics.js":6,"./vector.js":9}],4:[function(require,module,exports){
let Vector=require("./vector.js"),binomial=require("./combinatorics.js").binomial;function adem(e,t,r,s=2,l){if(void 0===l&&(l=2!==s),result=new Vector(s),!l){if(0===t)return result.set([e],1),result;if(0===e)return result.set([t],1),result;if(e>=2*t)return result.set([e,t],1),result;for(let r=0;r<1+e/2;r++)1===binomial(t-r-1,e-2*r)&&(0===r?result.set([e+t],1):result.set([e+t-r,r],1));return result}if(0===e&&0===t)return result.set([r],1),result;let i,n,a;if(0===r?(a=0,i=e,n=t):(i=e,n=r,a=t),0===i)return result.set([a,n,0],1),result;if(0===n)return result.set([0,i,a],1),result;if(i>=s*n+a)return result.set([0,i,a,n,0],1),result;for(let t=0;t<1+e/s;t++){let e=-((i+t)%2*2-1)*binomial((n-t)*(s-1)-1+a,i-s*t,s);(e=(e+s)%s)%s!=0&&(0===t?result.set([a,i+n,0],e):result.set([a,i+n-t,0,t,0],e))}if(0!==a)for(let t=0;t<1+(e-1)/s;t++){let e=-((i+t-1)%2*2-1)*binomial((n-t)*(s-1)-1,i-s*t-1,s);0!==(e=(e%s+s)%s)&&(0===t?result.set([0,i+n,1],e):result.set([0,i+n-t,1,t,0],e))}return result}function make_mono_admissible(e,t=2,r){void 0===r&&(r=2!==t);let s=new SerreCartanBasis(t);if(1===e.length)return s.set(e,1),s;if(!r&&2===e.length)return adem(...e);if(!r){let t,r=!0;for(t=0;t<e.length-1;t++)if(e[t]<2*e[t+1]){r=!1;break}if(r)return s.set(e,1),s;let l=adem(e[t],e[t+1]);for(let r of l.keys()){let i=e.slice(0,t).concat(r,e.slice(t+2));i=make_mono_admissible(i),s.addVector(i,l.get(r))}return s}let l,i=!0;for(l=1;l<e.length-2;l+=2)if(e[l]<e[l+1]+t*e[l+2]){i=!1;break}if(i)return s.set(e,1),s;let n=adem(...e.slice(l,l+3),t,!0);for(let r of n.keys()){let i=r.slice();if(i[0]=e[l-1]+r[0],e.length>=l+3&&(i[i.length-1]=e[l+3]+r[r.length-1]),i[0]<=1&&i[i.length-1]<=1){let a=e.slice(0,l-1).concat(i,e.slice(l+4));a=make_mono_admissible(a,t,!0),s.addVector(a,n.get(r))}}return s}class SerreCartanBasis extends Vector{constructor(e){super(e)}static Sq(e,t){let r=new SerreCartanBasis(t);return 2===t?r.set(e,1):r.set([e[0]%2,Math.floor(e[0]/2),0],1),r}static P(e,t){let r=new SerreCartanBasis(t);return 2===t?r.set([2*e[0]],1):r.set([0,e[0],0],1),r}static bP(e,t){let r=new SerreCartanBasis(t);return 2===t?r.set([2*e[0]+1],1):r.set([1,e[0],0],1),r}static b(e){let t=new SerreCartanBasis(e);return t.set([1],1),t}static Q(e,t){new SerreCartanBasis(t);throw new Error("Not implemented")}mult(e){return e.constructor===Number?this.scale(e):2===this.p?super.mult((e,t)=>make_mono_admissible(e.concat(t),this.p),e):super.mult((e,t)=>{if(1===e[e.length-1]&&1===t[0])return new SerreCartanBasis(p);return make_mono_admissible(e.slice(0,e.length-1).concat([e[e.length-1]+t[0]],t.slice(1)),this.p)},e)}inspect(e,t){return this.toString()}toLatex(){let e=[];if(2===this.p)for(let[t,r]of this){let r=t.map(e=>`Sq^{${e}}`).join("");e.push(r)}else for(let[t,r]of this){let s=t.map((e,t)=>t%2==0?1===e?"b":"":`P^{${e}}`).join("");1!==r&&(s=r+s),e.push(s)}return e.join(" + ")}toString(){let e=[];if(2===this.p)for(let[t,r]of this){let r=t.map(e=>`Sq${e}`).join("*");e.push(r)}else for(let[t,r]of this){let s=t.map((e,t)=>t%2==0?1===e?"b":"":`P${e}`).filter(e=>""!==e).join("*");1!==r&&(s=r+"*"+s),e.push(s)}return""===(e=e.join(" + "))&&(e=0),e}}module.exports=SerreCartanBasis;

},{"./combinatorics.js":6,"./vector.js":9}],5:[function(require,module,exports){
"use strict";function stdCatToString(t){if(void 0!==t)return void 0!==t.getStringifyingMapKey?t.getStringifyingMapKey():t.toString()}var StringifyingMap=function(){function t(t){void 0===t&&(t=stdCatToString),this.catToString=t,this.m=new Map,this.key_string_to_key_object=new Map}return t.prototype.set=function(t,e){let i=this.catToString(t);if(void 0===i)throw new Error("Key encoding undefined.");return this.key_string_to_key_object.set(i,t),this.m.set(i,e)},t.prototype.get=function(t){if(void 0!==this.catToString(t))return this.m.get(this.catToString(t))},t.prototype.delete=function(t){return this.key_string_to_key_object.delete(this.catToString(t)),this.m.delete(this.catToString(t))},t.prototype.has=function(t){return void 0!==t&&this.m.has(this.catToString(t))},t.prototype.getOrElse=function(t,e){return this.has(t)?this.get(t):e},t.prototype[Symbol.iterator]=function*(){for(let t of this.m)yield[this.key_string_to_key_object.get(t[0]),t[1]]},t.prototype.keys=function(){return this.key_string_to_key_object.values()},t.prototype.toString=function(){return this.m},Object.defineProperty(t.prototype,"size",{get:function(){return this.m.size},enumerable:!0,configurable:!0}),t}();module.exports=StringifyingMap;

},{}],6:[function(require,module,exports){
function padLeft(n,i){return(Array(i).join("0")+n).slice(-i)}function base_p_expansion(n,i,o=0){let t=[];for(;0!==n;)t.push(n%i),n=n/i|0;for(;t.length<o;)t.push(0);return t}function binomial(n,i){if("number"!=typeof n||"number"!=typeof i)return!1;let o=1;for(let t=n-i+1;t<=n;t++)o*=t;for(let n=1;n<=i;n++)o/=n;return o}function multinomial_mod_2(n){let i=n[0];for(let o=1;o<n.length;o++){for(let t=1;t<=Math.min(i,n[o]);t<<=1)if((t&i)===t&&0!=(t&n[o]))return 0;i+=n[o]}return 1}function binomial_mod2(n,i){return n<i?0:+!(0!=(n-i&i))}function multinomial_odd(n,i){let o=1,t=base_p_expansion(n.reduce((n,i)=>n+i),i),e=n.map(n=>base_p_expansion(n,i,t.length));for(let n=0;n<t.length;n++){let t=1,l=0;for(let i of e)n<i.length&&(t*=binomial(l+=+i[n],+i[n]));if(0==(o=o*t%i))return 0}return o}function binomial_modp(n,i,o){return n<i?0:multinomial_odd([n-i,i],o)}function multinomial(n,i=2){return 2===i?multinomial_mod_2(n):multinomial_odd(n,i)}function binomial_gen(n,i,o=2){return n<i||i<0?0:2===o?binomial_mod2(n,i):binomial_modp(n,i,o)}exports.multinomial=multinomial,exports.binomial=binomial_gen;

},{}],7:[function(require,module,exports){
let SerreCartanBasis=require("./SerreCartanBasis"),MilnorBasis=require("./MilnorBasis"),Vector=require("./vector");const jsep=require("jsep");jsep.addBinaryOp("=",1);let binop_map={},unop_map={},function_map={},identifier_map={};function handle_assignment(e,r,t){if(t.identifiers||(t.identifiers={}),t.identifiers[t.p]||(t.identifiers[t.p]={}),"Identifier"===e.type)return t.identifiers[t.p][e.name]=r,r;throw new Error(`Invalid left hand side of assignment. ${tree_to_string(e)} is not a valid identifier.`)}function evaluate_binop(e,r,t,n){return"="===e?handle_assignment(r,evaluate(t,n),n):binop_map[e](evaluate(r,n),evaluate(t,n),n)}function evaluate_unop(e,r,t,n){return unop_map[e](r,t,n)}function evaluate_logical(e,r,t,n){return binop_map[e](r,t,n)}function evaluate_call(e,arguments,r){return function_map[e.name](arguments,r)}function evaluate_member(e,r,t){throw new Error("Not implemented")}function evaluate_array(e,r){throw new Error("Not implemented")}binop_map["*"]=function(e,r,t){if(e.constructor===Number)return r.constructor===Number?e*r:r.scale(e);return e.mult(r)},binop_map["+"]=function(e,r,t){return e.add(r)},function_map.Sq=function(e,r){return r.basis.Sq(e,r.p)},function_map.P=function(e,r){return r.basis.P(e,r.p)},function_map.Q=function(e,r){return r.basis.Q(e,r.p)},function_map.bP=function(e,r){return r.basis.bP(e[0],r.p)},identifier_map.b=function(e){return e.basis.b(e.p)};let Sqn_re=/(Sq|P|Q|bP)(\d+)/;function evaluate_identifier(e,r){if(identifier_map.hasOwnProperty(e))return identifier_map[e](r);if(Sqn_re.test(e)){let t=Sqn_re.exec(e),n=t[1],i=t[2];return function_map[n]([Number(i)],r)}if(r.identifiers&&r.identifiers[r.p]&&r.identifiers[r.p].hasOwnProperty(e))return r.identifiers[r.p][e];throw new Error("Unknown identifier: "+e)}function evaluate_literal(e,r){return e}function evaluate(e,r){switch(e.type){case"BinaryExpression":return evaluate_binop(e.operator,e.left,e.right,r);case"UnaryExpression":return evaluate_unop(e.operator,evaluate(e.argument,r),e.prefix,r);case"LogicalExpression":return evaluate_logical(e.operator,evaluate(e.left,r),evaluate(e.right,r),r);case"CallExpression":return evaluate_call(e.callee,e.arguments.map(e=>evaluate(e,r)),r);case"MemberExpression":return evaluate_member(evaluate(e.object,r),evaluate(e.property,r),r);case"ArrayExpression":return evaluate_array(e.elements.map(e=>evaluate(e,r)),r);case"Identifier":return evaluate_identifier(e.name,r);case"Literal":return evaluate_literal(e.value,e.raw,r)}}function tree_to_string(e,r){switch(e.type){case"BinaryExpression":return tree_to_string(e.left)+" "+e.operator+" "+tree_to_string(e.right);case"UnaryExpression":let r=tree_to_string(e.argument);return e.prefix?e.operator+r:r+e.operator;case"LogicalExpression":return tree_to_string(e.left)+" "+e.operator+" "+tree_to_string(e.right);case"CallExpression":return e.callee.name+"("+e.arguments.map(tree_to_string).join(", ")+")";case"MemberExpression":return tree_to_string(e.object)+"["+tree_to_string(e.property)+"]";case"ArrayExpression":return"["+e.elements.map(tree_to_string).join(", ")+"]";case"Identifier":return e.name;case"Literal":return e.raw}}function steenrod_simplify(e,r){return evaluate(jsep(e),r)}context={p:2,basis:SerreCartanBasis},console.log(steenrod_simplify("(Sq2*Sq1+Sq3)*Sq2",context)),exports.steenrod_simplify=steenrod_simplify;

},{"./MilnorBasis":3,"./SerreCartanBasis":4,"./vector":9,"jsep":2}],8:[function(require,module,exports){
let evaluator=require("./evaluator");window.SerreCartanBasis=require("./SerreCartanBasis"),window.MilnorBasis=require("./MilnorBasis"),window.repl=require("repl"),window.steenrod_simplify=evaluator.steenrod_simplify;var replServer=repl.start({prompt:"my-app > "});

},{"./MilnorBasis":3,"./SerreCartanBasis":4,"./evaluator":7,"repl":1}],9:[function(require,module,exports){
let StringifyingMap=require("./StringifyingMap");class Vector extends StringifyingMap{constructor(t){super(JSON.stringify),this.p=t}addTerm(t,s){return this.has(t)&&(s+=this.get(t)),0===(s=(s%this.p+this.p)%this.p)?this.delete(t):this.set(t,s),this}addVector(t,s=1){for(const[r,e]of t)this.addTerm(r,s*e);return this}scale(t){for(const[s,r]of this)this.set(s,t*r);return this}add(t){let s=new this.constructor(this.p);for(const[t,r]of this)s.set(t,r);for(const[r,e]of t)s.addTerm(r,e);return s}mult(t,s){let r=new this.constructor(this.p);for(const[e,o]of this)for(const[i,n]of s){let s=t(e,i);r.addVector(s,o*n)}return r}map_on_basis(t){let s=new this.constructor(this.p);for(const[r,e]of this)s.addVector(t(r),e);return s}}module.exports=Vector;

},{"./StringifyingMap":5}]},{},[8]);
